
// COLOR CODES /////////////////////////////////////////////////////////////////

const RESET = '\x1b[0m';
const GREEN = '\x1b[0;32m';
const RED   = '\x1b[4;31m';

// ERRORS //////////////////////////////////////////////////////////////////////

export class HardcoreError extends Error {
  constructor(msg) {
    super();

    Error.captureStackTrace(this, this.constructor);

    this.name    = this.constructor.name;
    this.message = msg;
  }
}

export class MalformedError extends HardcoreError {}

export class ParseError extends HardcoreError {
  constructor({ prior, line }, token='', msg='Encountered illegal token.', rc) {
    if (/^\s+/u.test(token))
      token = '[WHITESPACE]';
    else
      [ token ] = token.split(/\s+/gu);

    token = token.slice(0, 16);

    msg =
      `${ msg }\n` +
      `    LINE ${ line }: ${ GREEN }${ prior }${ RED }${ token }${ RESET }`;

    super(msg);

    if (rc) this.nodeRecoverable = true;
  }
}

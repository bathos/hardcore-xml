
const peAttackURL = 'http://www.ws-attacks.org/index.php/XML_Entity_Expansion';

export default {

// PARSE ERRORS ////////////////////////////////////////////////////////////////

  badExpansion:
    'Encountered a reference whose expansion is not valid in context.',
  badIDReference:
    'An attribute of type IDREF or IDREFS referred to an unused ID.',
  badReference: ref =>
    `Encountered a reference, ${ ref }, which has not been defined.`,
  entityAttrNotEntity:
    'Attribute of type ENTITY or ENTITIES referenced undeclared entity.',
  entityAttrNotNDATA:
    'Attribute of type ENTITY or ENTITIES referenced a parsed entity.',
  entityRedefinition: entity =>
    `The entity ${ entity } was defined twice.`,
  invalidValueForXMLSpace:
    'The special xml:space attribute can only be ‘default’ or ‘preserve’.',
  malformedReference:
    'Encountered a reference whose expansion violates boundaries.',
  ndataNotDeclared:
    'NDATA entity referred to an undeclared notation.',
  ndataOutOfAttribute:
    'NDATA entity referred to outside of an attribute value.',
  ndataOutOfEntityAttribute:
    'NDATA entity referred to in attribute not of type ENTITY or ENTITIES.',
  notationEnumNotDeclared:
    'Attribute definition enumeration includes an undeclared notation.',
  notationRedeclared:
    'Encountered a redeclaration of a previously declared notation.',
  overlongReference:
    'The length of an entity expansion has exceeded than the maximum ' +
    'permitted. This is likely an attack. See ' + peAttackURL,
  parameterRecurses:
    'Encountered a parameter entity containing a self-reference.',
  repeatAttributeKey: key =>
    `The attribute key ${ key } is repeated on a single element.`,
  repeatID:
    'An attribute value of type ID was not unique.',
  valueNotInEnum:
    'The attribute value is not among the permitted enumeration of values.',

// NODE MALFORMATION ERRORS ////////////////////////////////////////////////////

  defaultEmpty: (type, defaultType) =>
    `The default value cannot be empty for an attribute of type ${ type } ` +
    `and default type ${ defaultType }.`,
  badNMToken:
    'An attribute of type NMTOKEN or NMTOKENS cannot have an empty value.',
  doctypeAfterRoot:
    'A Doctype node may not appear after the root Element.',
  emptyContentSpecGroup:
    'A content spec sequence or choice must have at least one member.',
  emptyElemHasContent: name =>
    `The element ${ name } was declared as EMPTY but was found with children.`,
  emptyEnum:
    'An attribute definition with an enumerated type cannot have an empty ' +
    'enumeration set.',
  mismatchedDoctype:
    'The name of the Doctype must correspond to the root Element.',
  missingDoctypeSystemID:
    'A doctype declaration possessing a public ID must also have a system ID.',
  missingEntitySystemID:
    'An entity declaration possessing a public ID must also have a system ID.',
  missingName: node =>
    `A ${ node } must have a name.`,
  missingNotationID:
    'A NotationDeclaration must have a system ID or public ID, or both.',
  missingRequiredAttr: (elem, attr) =>
    `The element ${ elem } is missing the required attribute ${ attr }.`,
  missingRoot:
    'A document must have a root Element.',
  missingTarget:
    'A processing instruction must have a target.',
  missingVersion:
    'A document cannot have ‘encoding’ or ‘standalone’ without ‘version’.',
  multipleDoctypes:
    'A document cannot have more than one Doctype child.',
  multipleNotationAttrs:
    'A single element can only have at most one attribute definition of the ' +
    'type ‘notation’.',
  multipleRoots:
    'A document cannot have more than one Element child.',
  onlyUnparsedMayHaveArbitraryValue:
    'A parsed entity’s value cannot be arbitrary data.',
  repeatDeclaration:
    'The declaration of a given Element, Notation, or Entity cannot be made ' +
    'more than once.',
  specIllegal: (parent, child) =>
    `The content spec for ${ parent } does not allow ${ child } as it ` +
    `appeared in the document.`,
  specIncomplete: parent =>
    `The content spec for ${ parent } demanded children which were not ` +
    `present when ${ parent } appeared in the document.`,
  unparsedMissingID:
    'An unparsed entity must have an external ID.',
  unparsedMissingNDATA:
    'An unparsed entity declaration must have an NDATA declaration.',

// TYPE ERRORS /////////////////////////////////////////////////////////////////

  attributeMustBeNamed:
    'Unlike regular nodes, an attribute may never enter a nameless state.',
  badAttrs:
    'The formats for setting element.attributes are Object/Map (key-val) or ' +
    'Set/Array (containing Attribute instances).',
  badEnum: val =>
    `"${ val }" is not among the enumerated values for this attribute.`;
  badQuote:
    'The quote delimiter character must be " or \'.',
  badTab:
    'The indentation tab string may only contain space, \\t, \\n and \\r.',
  invalidChild: legals =>
    `Attempted adding an illegal child. Legal children here are: ${
      legals.slice(0, -1).map(Legal => Legal.name).join(', ')
    }${
      legals.length > 1 ? ' and ' : ''
    }${
      legals[legals.length - 1].name
    }.`,
  invalidContentSpec:
    'The value of spec must be "any", "empty", or an instance of ' +
    'ContentSpecMixed, ContentSpecChoice, or ContentSpecSequence.',
  invalidSelector: (selector, badness) =>
    `Selector string was either invalid or unsupported ("${
      selector
    }" at "${
      badness
    })"".`,
  invalidSource:
    'Source must be String or Buffer',
  invalidTarget:
    'Target, if specified, must be ‘unknown,’ ‘document,’ ' +
    '‘external dtd,’ or ‘fragment’',
  repeatChild:
    'Children must be unique. Use `clone()` to repeat a node.',
  repeatChoiceChild:
    'A content spec choice group cannot contain the same element twice.',
  repeatMixedChild:
    'A mixed content spec cannot contain the same element twice.'
};

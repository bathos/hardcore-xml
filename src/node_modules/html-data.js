
const specs = {
  embedded: {
    type: 'choice',
    content: [
      'audio', 'canvas', 'embed', 'iframe', 'img', 'math', 'object', 'svg',
      'video'
    ]
  },
  flow: {
    type: 'pcdata',
    content: [
      'a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi',
      'bdo', 'blockquote', 'br', 'button', 'canvas', 'cite', 'code', 'data',
      'datalist', 'del', 'dfn', 'div', 'dl', 'em', 'embed', 'fieldset',
      'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
      'header', 'hr', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen',
      'label', 'main', 'map', 'mark', 'math', 'meter', 'nav', 'noscript',
      'object', 'ol', 'output', 'p', 'pre', 'progress', 'q', 'ruby', 's',
      'samp', 'script', 'section', 'select', 'small', 'span', 'strong', 'sub',
      'sup', 'svg', 'table', 'template', 'textarea', 'time', 'u', 'ul', 'var',
      'video', 'wbr'
    ]
  },
  heading: {
    type: 'choice',
    content: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ]
  },
  interactive: {
    type: 'choice',
    content: [
      'a', 'audio', 'button', 'embed', 'iframe', 'img', 'input', 'keygen',
      'label', 'object', 'select', 'textarea', 'video'
    ]
  },
  metadata: {
    type: 'choice',
    content: [
      'base', 'link', 'meta', 'noscript', 'script', 'style', 'template',
      'title'
    ]
  },
  phrasing: {
    type: 'pcdata',
    content: [
      'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button',
      'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em',
      'embed', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label',
      'map', 'mark', 'math', 'meter', 'noscript', 'object', 'output',
      'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'small',
      'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time',
      'u', 'var', 'video', 'wbr'
    ]
  },
  sectioning: {
    type: 'choice',
    content: [ 'article', 'aside', 'nav' 'section' ]
  },
};

export default {

  // HTML attributes are given direct accessors on HTMLElement. We do this
  // indiscriminately: any element possesses all accessors; this is because the
  // elements are not represented as unique classes, and can be renamed in place
  // anyway. Note that "name" is omitted because it collides.

  attributes: [
    'abbr', 'accept', 'accept-charset', 'accesskey', 'action', 'alt', 'async',
    'autocomplete', 'autofocus', 'autoplay', 'border', 'challenge', 'charset',
    'checked', 'cite', 'class', 'cols', 'colspan', 'content', 'contenteditable',
    'controls', 'coords', 'crossorigin', 'data', 'datetime', 'default', 'defer',
    'dir', 'dirname', 'disabled', 'download', 'enctype', 'for', 'form',
    'formaction', 'formenctype', 'formmethod', 'formnovalidate', 'formtarget',
    'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'http-equiv',
    'id', 'inputmode', 'ismap', 'keytype', 'kind', 'label', 'lang', 'list',
    'loop', 'low', 'manifest', 'max', 'maxlength', 'media', 'mediagroup',
    'menu', 'method', 'min', 'minlength', 'multiple', 'muted', 'novalidate',
    'onabort', 'onafterprint', 'onbeforeprint', 'onbeforeunload', 'onblur',
    'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick',
    'oncuechange', 'ondblclick', 'ondurationchange', 'onemptied', 'onended',
    'onerror', 'onfocus', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown',
    'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata',
    'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave',
    'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel',
    'onoffline', 'ononline', 'onpagehide', 'onpageshow', 'onpause', 'onplay',
    'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset',
    'onresize', 'onscroll', 'onseeked', 'onseeking', 'onselect', 'onshow',
    'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate',
    'ontoggle', 'onunload', 'onvolumechange', 'onwaiting', 'optimum', 'pattern',
    'placeholder', 'poster', 'preload', 'readonly', 'rel', 'required',
    'reversed', 'rows', 'rowspan', 'sandbox', 'scope', 'selected', 'shape',
    'size', 'sizes', 'sortable', 'sorted', 'span', 'spellcheck', 'src',
    'srcdoc', 'srclang', 'start', 'step', 'style', 'tabindex', 'target',
    'title', 'translate', 'type', 'typemustmatch', 'usemap', 'value', 'width',
    'wrap'
  ],

  // These are the elements which self-close regardless of the use of />. Any
  // element not listed here, in turn, should always have a close tag in html
  // (many agents appear to allow it, but only in that they recover from the
  // error, but not always completely -- e.g. <script src="xyz" /> will not
  // cause a script to load).

  selfCloses: new Set([
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'keygen',
    'link',
    'menuitem',
    'meta'
    'param',
    'source',
    'track',
    'wbr'
  ]),

  // These are the elements whose whitespace content is not collapsed.

  permitsWS: new Set([
    'pre',
    'script',
    'style',
    'textarea'
  ]),

  // HTML has 248 implicit general entity definitions for representing
  // individual characters in addition to XML’s always-implicit GEs. However,
  // they all resolve to characters that never need to be escaped; mainly they
  // can be considered a relic of the pre-Unicode era. However some remain
  // useful either as convenience (&cent;, or open character map?) or as a way
  // to disambiguate same-glyph/invisible characters explicitly (&nbsp;). For
  // our purposes, all are resolved to their literal character representation.

  translateGERef(ref) {
    switch (ref) {
      case '&Aacute;':   return 'Á';
      case '&aacute;':   return 'á';
      case '&Acirc;':    return 'Â';
      case '&acirc;':    return 'â';
      case '&acute;':    return '´';
      case '&AElig;':    return 'Æ';
      case '&aelig;':    return 'æ';
      case '&Agrave;':   return 'À';
      case '&agrave;':   return 'à';
      case '&alefsym;':  return 'ℵ';
      case '&Alpha;':    return 'Α';
      case '&alpha;':    return 'α';
      case '&and;':      return '∧';
      case '&ang;':      return '∠';
      case '&Aring;':    return 'Å';
      case '&aring;':    return 'å';
      case '&asymp;':    return '≈';
      case '&Atilde;':   return 'Ã';
      case '&atilde;':   return 'ã';
      case '&Auml;':     return 'Ä';
      case '&auml;':     return 'ä';
      case '&bdquo;':    return '„';
      case '&Beta;':     return 'Β';
      case '&beta;':     return 'β';
      case '&brvbar;':   return '¦';
      case '&bull;':     return '•';
      case '&cap;':      return '∩';
      case '&Ccedil;':   return 'Ç';
      case '&ccedil;':   return 'ç';
      case '&cedil;':    return '¸';
      case '&cent;':     return '¢';
      case '&Chi;':      return 'Χ';
      case '&chi;':      return 'χ';
      case '&circ;':     return 'ˆ';
      case '&clubs;':    return '♣';
      case '&cong;':     return '≅';
      case '&copy;':     return '©';
      case '&crarr;':    return '↵';
      case '&cup;':      return '∪';
      case '&curren;':   return '¤';
      case '&dagger;':   return '†';
      case '&Dagger;':   return '‡';
      case '&darr;':     return '↓';
      case '&dArr;':     return '⇓';
      case '&deg;':      return '°';
      case '&Delta;':    return 'Δ';
      case '&delta;':    return 'δ';
      case '&diams;':    return '♦';
      case '&divide;':   return '÷';
      case '&Eacute;':   return 'É';
      case '&eacute;':   return 'é';
      case '&Ecirc;':    return 'Ê';
      case '&ecirc;':    return 'ê';
      case '&Egrave;':   return 'È';
      case '&egrave;':   return 'è';
      case '&empty;':    return '∅';
      case '&emsp;':     return '\u2003';
      case '&ensp;':     return '\u2002';
      case '&Epsilon;':  return 'Ε';
      case '&epsilon;':  return 'ε';
      case '&equiv;':    return '≡';
      case '&Eta;':      return 'Η';
      case '&eta;':      return 'η';
      case '&ETH;':      return 'Ð';
      case '&eth;':      return 'ð';
      case '&Euml;':     return 'Ë';
      case '&euml;':     return 'ë';
      case '&euro;':     return '€';
      case '&exist;':    return '∃';
      case '&fnof;':     return 'ƒ';
      case '&forall;':   return '∀';
      case '&frac12;':   return '½';
      case '&frac14;':   return '¼';
      case '&frac34;':   return '¾';
      case '&frasl;':    return '⁄';
      case '&Gamma;':    return 'Γ';
      case '&gamma;':    return 'γ';
      case '&ge;':       return '≥';
      case '&harr;':     return '↔';
      case '&hArr;':     return '⇔';
      case '&hearts;':   return '♥';
      case '&hellip;':   return '…';
      case '&Iacute;':   return 'Í';
      case '&iacute;':   return 'í';
      case '&Icirc;':    return 'Î';
      case '&icirc;':    return 'î';
      case '&iexcl;':    return '¡';
      case '&Igrave;':   return 'Ì';
      case '&igrave;':   return 'ì';
      case '&image;':    return 'ℑ';
      case '&infin;':    return '∞';
      case '&int;':      return '∫';
      case '&Iota;':     return 'Ι';
      case '&iota;':     return 'ι';
      case '&iquest;':   return '¿';
      case '&isin;':     return '∈';
      case '&Iuml;':     return 'Ï';
      case '&iuml;':     return 'ï';
      case '&Kappa;':    return 'Κ';
      case '&kappa;':    return 'κ';
      case '&Lambda;':   return 'Λ';
      case '&lambda;':   return 'λ';
      case '&lang;':     return '〈';
      case '&laquo;':    return '«';
      case '&larr;':     return '←';
      case '&lArr;':     return '⇐';
      case '&lceil;':    return '⌈';
      case '&ldquo;':    return '“';
      case '&le;':       return '≤';
      case '&lfloor;':   return '⌊';
      case '&lowast;':   return '∗';
      case '&loz;':      return '◊';
      case '&lrm;':      return '\u200E';
      case '&lsaquo;':   return '‹';
      case '&lsquo;':    return '‘';
      case '&macr;':     return '¯';
      case '&mdash;':    return '—';
      case '&micro;':    return 'µ';
      case '&middot;':   return '·';
      case '&minus;':    return '−';
      case '&Mu;':       return 'Μ';
      case '&mu;':       return 'μ';
      case '&nabla;':    return '∇';
      case '&nbsp;':     return '\u00A0';
      case '&ndash;':    return '–';
      case '&ne;':       return '≠';
      case '&ni;':       return '∋';
      case '&not;':      return '¬';
      case '&notin;':    return '∉';
      case '&nsub;':     return '⊄';
      case '&Ntilde;':   return 'Ñ';
      case '&ntilde;':   return 'ñ';
      case '&Nu;':       return 'Ν';
      case '&nu;':       return 'ν';
      case '&Oacute;':   return 'Ó';
      case '&oacute;':   return 'ó';
      case '&Ocirc;':    return 'Ô';
      case '&ocirc;':    return 'ô';
      case '&OElig;':    return 'Œ';
      case '&oelig;':    return 'œ';
      case '&Ograve;':   return 'Ò';
      case '&ograve;':   return 'ò';
      case '&oline;':    return '‾';
      case '&Omega;':    return 'Ω';
      case '&omega;':    return 'ω';
      case '&Omicron;':  return 'Ο';
      case '&omicron;':  return 'ο';
      case '&oplus;':    return '⊕';
      case '&or;':       return '∨';
      case '&ordf;':     return 'ª';
      case '&ordm;':     return 'º';
      case '&Oslash;':   return 'Ø';
      case '&oslash;':   return 'ø';
      case '&Otilde;':   return 'Õ';
      case '&otilde;':   return 'õ';
      case '&otimes;':   return '⊗';
      case '&Ouml;':     return 'Ö';
      case '&ouml;':     return 'ö';
      case '&para;':     return '¶';
      case '&part;':     return '∂';
      case '&permil;':   return '‰';
      case '&perp;':     return '⊥';
      case '&Phi;':      return 'Φ';
      case '&phi;':      return 'φ';
      case '&Pi;':       return 'Π';
      case '&pi;':       return 'π';
      case '&piv;':      return 'ϖ';
      case '&plusmn;':   return '±';
      case '&pound;':    return '£';
      case '&prime;':    return '′';
      case '&Prime;':    return '″';
      case '&prod;':     return '∏';
      case '&prop;':     return '∝';
      case '&Psi;':      return 'Ψ';
      case '&psi;':      return 'ψ';
      case '&radic;':    return '√';
      case '&rang;':     return '〉';
      case '&raquo;':    return '»';
      case '&rarr;':     return '→';
      case '&rArr;':     return '⇒';
      case '&rceil;':    return '⌉';
      case '&rdquo;':    return '”';
      case '&real;':     return 'ℜ';
      case '&reg;':      return '®';
      case '&rfloor;':   return '⌋';
      case '&Rho;':      return 'Ρ';
      case '&rho;':      return 'ρ';
      case '&rlm;':      return '\u200F';
      case '&rsaquo;':   return '›';
      case '&rsquo;':    return '’';
      case '&sbquo;':    return '‚';
      case '&Scaron;':   return 'Š';
      case '&scaron;':   return 'š';
      case '&sdot;':     return '⋅';
      case '&sect;':     return '§';
      case '&shy;':      return '\u00AD';
      case '&Sigma;':    return 'Σ';
      case '&sigma;':    return 'σ';
      case '&sigmaf;':   return 'ς';
      case '&sim;':      return '∼';
      case '&spades;':   return '♠';
      case '&sub;':      return '⊂';
      case '&sube;':     return '⊆';
      case '&sum;':      return '∑';
      case '&sup1;':     return '¹';
      case '&sup2;':     return '²';
      case '&sup3;':     return '³';
      case '&sup;':      return '⊃';
      case '&supe;':     return '⊇';
      case '&szlig;':    return 'ß';
      case '&Tau;':      return 'Τ';
      case '&tau;':      return 'τ';
      case '&there4;':   return '∴';
      case '&Theta;':    return 'Θ';
      case '&theta;':    return 'θ';
      case '&thetasym;': return 'ϑ';
      case '&thinsp;':   return '\u2009';
      case '&THORN;':    return 'Þ';
      case '&thorn;':    return 'þ';
      case '&tilde;':    return '˜';
      case '&times;':    return '×';
      case '&trade;':    return '™';
      case '&Uacute;':   return 'Ú';
      case '&uacute;':   return 'ú';
      case '&uarr;':     return '↑';
      case '&uArr;':     return '⇑';
      case '&Ucirc;':    return 'Û';
      case '&ucirc;':    return 'û';
      case '&Ugrave;':   return 'Ù';
      case '&ugrave;':   return 'ù';
      case '&uml;':      return '¨';
      case '&upsih;':    return 'ϒ';
      case '&Upsilon;':  return 'Υ';
      case '&upsilon;':  return 'υ';
      case '&Uuml;':     return 'Ü';
      case '&uuml;':     return 'ü';
      case '&weierp;':   return '℘';
      case '&Xi;':       return 'Ξ';
      case '&xi;':       return 'ξ';
      case '&Yacute;':   return 'Ý';
      case '&yacute;':   return 'ý';
      case '&yen;':      return '¥';
      case '&yuml;':     return 'ÿ';
      case '&Yuml;':     return 'Ÿ';
      case '&Zeta;':     return 'Ζ';
      case '&zeta;':     return 'ζ';
      case '&zwj;':      return '\u200D';
      case '&zwnj;':     return '\u200C';
    }
  }
};
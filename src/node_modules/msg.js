
export default {
	// Parsing errors
	badDoctypeName: val => `Encountered illegal doctype name ${ val }`,
	badEncoding: val => `Encountered illegal encoding name ${ val }`,
	badEnd: 'Stream ended without completing a valid document',
	badSDD: val => `Encountered illegal standalone value ${ val }`,
	badPIEnd: 'Processing instruction terminated incorrectly',
	badPITarget: val => `Encountered illegal PI target name ${ val }`,
	badTagName: 'Invalid or missing tag name',
	badVersion: val => `Encountered illegal xml version number ${ val }`,
	badXMLDecl: 'Encountered malformed XML declaration',
	commentDblHyphen: 'Encountered illegal ‘--’ within comment text',
	comment3Dash: 'Comment terminated with illegal sequence',
	illegalAmpersand: 'Encountered unescaped ampersand in invalid context',
	illegalAtRoot: 'Encountered illegal token at document root',
	illegalCDATAClose: 'Encountered ‘]]>’ within text node',
	illegalLT: 'Encountered unescaped ‘>’ in illegal context',
	illegalWhitespace: 'Encountered illegal whitespace in tag',
	invalidChar: 'Encountered illegal character in context',
	misplacedCDATA: 'Encountered CDATA in illegal context',
	misplacedCloseTag: 'Encountered closing tag in illegal context',
	misplacedDoctype: 'Doctype declaration encountered in illegal position',
	misplacedXMLDecl: 'XML declaration encountered in illegal position',
	missingDoctypeName: 'Encountered a doctype declaration without a name',
	missingPITarget: 'Encountered a processing instruction without a target',
	missingVal: 'Encountered attribute key without value',
	multipleRoots: 'Encountered a second document root node',
	unmatched: name => `Close tag for ‘${ name }’ not matched`,
	unwrappedVal: 'Encountered attribute value without delimiters',

	// Constructor / method errors
	cannotHaveDuplicateKeys: k => `Attributes must have unique keys (${ k }).`,
	cannotHaveMultipleRoots: 'Document children may contain only one Element.',
	invalidType: type => `Members must be instances of ${ type }.`
};
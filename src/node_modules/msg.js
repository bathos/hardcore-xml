
export default {
	// Class Type Errors

	// Parsing Type Errors
	invalidTarget: 'Parsing target was invalid.',

	// Parsing Syntax Errors
	completeGarbage: 'Garbage in, garbage out :(',
	illegalAttrChar: 'Encountered illegal chars in Element attribute',
	illegalInDTDE: 'Illegal node type encountered in DoctypeExternal',
	illegalInElement: 'Illegal node type encountered in Element',
	illegalOrMisplacedInDoc: 'Encountered node in illegal position in Document',
	incompatibleContentSpecType: 'ContentSpec type is self-contradicting',
	incompleteTarget: target => `Did not complete valid ${ target }.`,
	malformedAttList: 'Malformed attribute list buddy',
	malformedClosingTag: 'Malformed closing tag',
	malformedContentSpec: 'Malformed content spec in ElementDeclaration',
	malformedContentSpecParen: 'Malformed content spec has imbalanced parens',
	malformedContentSpecSep: 'Malformed content spec mixed seperators',
	malformedEmptyTag: 'Malformed empty Element tag',
	malformedEntityDecl: 'Malformed EntityDeclaration',
	malformedNotationDecl: 'Malformed NotationDeclaration',
	malformedOpenTag: 'Malformed open tag',
	malformedPI: 'Malformed ProcessingInstruction',
	malformedRemainder: 'Ended with unparseable remainder',
	malformedTextDecl: 'External DTD text declaration malformed',
	malformedXMLDecl: 'XML declaration was malformed',
	misplacedXMLDecl: 'XML declaration encountered in illegal position',
	mixedEnumNotAsterisk: 'An enumeration with #PCDATA must have * qualifier',
	multipleElements: 'Target was Element but multiple roots were found',
	notElement: 'Target was Element, but that’s not what this is',
	unmatchableTag: name => `Close tag ‘${ name }’ had no matching open tag`,
	unmatchedTag: name => `Expected ‘${ name }’ tag close was not matched`,
	whatIsThisEven: 'Why is this here?',
	xmlDeclBadEnc: 'XML declaration has invalid encoding',
	xmlDeclBadSD: 'XML declaration has invalid standalone attribute',
	xmlDeclBadVers: 'XML declaration has missing or invalid version'

/*
	// Parsing errors
	badDoctypeName: val => `Encountered illegal doctype name ${ val }`,
	badEncoding: val => `Encountered illegal encoding name ${ val }`,
	badEnd: 'Stream ended without completing a valid document',
	badSDD: val => `Encountered illegal standalone value ${ val }`,
	badPIEnd: 'Processing instruction terminated incorrectly',
	badPITarget: val => `Encountered illegal PI target name ${ val }`,
	badTagName: 'Invalid or missing tag name',
	badVersion: val => `Encountered illegal xml version number ${ val }`,
	badXMLDecl: 'Encountered malformed XML declaration',
	commentDblHyphen: 'Encountered illegal ‘--’ within comment text',
	comment3Dash: 'Comment terminated with illegal sequence',
	illegalAmpersand: 'Encountered unescaped ampersand in invalid context',
	illegalAtRoot: 'Encountered illegal token at document root',
	illegalCDATAClose: 'Encountered ‘]]>’ within text node',
	illegalLT: 'Encountered unescaped ‘>’ in illegal context',
	illegalWhitespace: 'Encountered illegal whitespace in tag',
	invalidChar: 'Encountered illegal character in context',
	misplacedCDATA: 'Encountered CDATA in illegal context',
	misplacedCloseTag: 'Encountered closing tag in illegal context',
	misplacedDoctype: 'Doctype declaration encountered in illegal position',
	missingDoctypeName: 'Encountered a doctype declaration without a name',
	missingPITarget: 'Encountered a processing instruction without a target',
	missingVal: 'Encountered attribute key without value',
	multipleRoots: 'Encountered a second document root node',
	unmatched: name => `Close tag for ‘${ name }’ not matched`,
	unwrappedVal: 'Encountered attribute value without delimiters',

	// Constructor / method errors
	cannotHaveDuplicateKeys: k => `Attributes must have unique keys (${ k }).`,
	cannotHaveMultipleRoots: 'Document children may contain only one Element.',
	invalidType: type => `Members must be instances of ${ type }.`
	*/
};
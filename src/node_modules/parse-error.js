
// PROBLEM TEXT ////////////////////////////////////////////////////////////////

const redStart = '\x1b[31m';
const redEnd   = '\x1b[39m';

const problemText = (str, index=0) => {
	if (!str) return '.';

	if (index > 20) {
		str = str.substr(index - 20);
		index = 20;
	}

	if (str.length > 40) str.substr(0, 40);

	let caret, start, end;

	if (index + 1 == str.length) {
		caret = '<--';
		start = str;
		end   = '';
	} else {
		caret = '-->';
		start = str.substr(0, index);
		end   = str.substr(index);
	}

	return ': ' + start + redStart + caret + redEnd + end;
}

// PARSE ERROR /////////////////////////////////////////////////////////////////

export default class ParseError extends Error {
	constructor(msg, text, index) {
		super(msg);

		Error.captureStackTrace(this, this.constructor);

		this.name    = 'ParseError';
		this.message = `${
			redStart + msg + redEnd
		}${ problemText(text, index) }`;
	}
}

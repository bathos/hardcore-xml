
// CODEPOINT VALIDATION ////////////////////////////////////////////////////////

const isValidChar = code =>
	(code == 0x000009) ||
	(code == 0x00000A) ||
	(code == 0x00000D) ||
	(code >= 0x000020 && code <= 0x00D7FF) ||
	(code >= 0x00E000 && code <= 0x00FFFD) ||
	(code >= 0x010000 && code <= 0x10FFFF);

const isValidNameFirstCharCode = code => 
	(code == 0x00003A) ||
	(code >= 0x000041 && code <= 0x00005A) ||
	(code == 0x00005F) ||
	(code >= 0x000061 && code <= 0x00007A) ||
	(code >= 0x0000C0 && code <= 0x0000D6) ||
	(code >= 0x0000D8 && code <= 0x0000F6) ||
	(code >= 0x0000F8 && code <= 0x0002FF) ||
	(code >= 0x000370 && code <= 0x00037D) ||
	(code >= 0x00037F && code <= 0x001FFF) ||
	(code >= 0x00200C && code <= 0x00200D) ||
	(code >= 0x002070 && code <= 0x00218F) ||
	(code >= 0x002C00 && code <= 0x002FEF) ||
	(code >= 0x003001 && code <= 0x00D7FF) ||
	(code >= 0x00F900 && code <= 0x00FDCF) ||
	(code >= 0x00FDF0 && code <= 0x00FFFD) ||
	(code >= 0x010000 && code <= 0x0EFFFF);

const isValidNameRestCharCode = code =>
	isValidNameFirstCharCode(code) ||
	(code >= 0x00002D && code <= 0x00002E) ||
	(code >= 0x000030 && code <= 0x000039) ||
	(code == 0x0000B7) ||
	(code >= 0x000300 && code <= 0x00036F) ||
	(code >= 0x00203F && code <= 0x002040);

const areValidCodePoints = (str, isValid) => {
	for (const char of str) {
		const cp = codePointAt(0);
		if (!isValid(cp)) return false;
	}

	return true;
};

// ENUMERATED TOKENS ///////////////////////////////////////////////////////////

const defaultTypes = [
	'#FIXED',
	'#IMPLIED',
	'#REQUIRED'
];

const stringOrTokenizedTypes = [
	'CDATA',
	'ENTITIES',
	'ENTITY',
	'ID',
	'IDREF',
	'IDREFS',
	'NMTOKEN',
	'NMTOKENS',
	'NOTATION'
];

// TOKEN VALIDATION ////////////////////////////////////////////////////////////

export const cdataContent = str => {
	str = String(str);

	if (~str.indexOf(']]>')) return false;

	return areValidCodePoints(str, isValidChar);
};

export const charData = str => {
	str = String(str);

	return areValidCodePoints(str, isValidChar);
}

export const charRef = str => /^#(\d+|x[A-Fa-f\d]+)$/.test(str);

export const commentContent = str => {
	str = String(str);

	if (str.endsWith('-') || ~str.indexOf('--')) return false;

	return areValidCodePoints(str, isValidChar);	
};

export const defaultType = str => !!~defaultTypes.indexOf(str);

export const encoding = str => /^[A-Z]([A-Z\d\.\-_])*$/i.test(str);

export const entityValue = str => {
	str = String(str);

	// Weâ€™ve already dealt with ampersands here, but % cannot be escaped.

	const parts = this.split(/(?=%)/g);

	for (const part of parts) {
		if (!part.startsWith('%'))
			continue;

		let [ , name ] = part.match(/^%([\s\S]+);/) || [];

		if (!name || !isValid.name(name))
			return false;
	}

	return str && areValidCodePoints(str, isValidChar);
};

export const name = str => {
	str = String(str);

	if (!str) return false;

	const [ first, ...rest ] = str;

	const firstCP = first.codePointAt(0);

	if (!isValidNameFirstCharCode(firstCP)) return false;

	if (!rest.length) return true;

	for (const char of rest) {
		const cp = char.codePointAt(0);
		if (!isValidNameRestCharCode(cp)) return false;
	}

	return true;
};

export const nmToken = str => {
	str = String(str);

	return str && areValidCodePoints(str, isValidNameRestCharCode);
};

export const piInstruction = str => {
	str = String(str);

	return !~str.indexOf('?>') && areValidCodePoints(str);	
};

export const piTarget = str => {
	str = String(str);

	return name(str) && !/^xml$/i.test(str);
};

export const publicID = str => {
	str = String(str);

	return /[\n\r A-Z\d\-'\(\)\+,\.\/:=\?;\!\*#@\$_%]+/i.test(str);
};

export const quantifier = str => {
	str = String(str);

	return /^([\?\*\+]|)$/.test(str)
};

export const stringOrTokenizedType = str => {
	return !!~stringOrTokenizedTypes.indexOf(str);	
};

export const systemID = str => {
	str = String(str);

	if (~str.indexOf('"') && ~str.indexOf('\''))
		return false;

	return str && areValidCodePoints(str, isValidChar);
};

export const whitespace = str => {
	return /^[ \t\r\n]*$/.test(str);
};
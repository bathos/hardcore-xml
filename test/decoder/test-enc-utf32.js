const { testOutput } = require('./halp-decoder');

testOutput({
  bytes: [
    0x50, 0x00, 0x00, 0x00,
    0x6F, 0x00, 0x00, 0x00,
    0x6F, 0x00, 0x00, 0x00,
    0x70, 0x00, 0x00, 0x00,
    0xFA, 0xFD, 0x00, 0x00,
    0x25, 0xF0, 0x01, 0x00,
    0x1A, 0xF0, 0x01, 0x00,
    0x21, 0x00, 0x00, 0x00
  ],
  expected: 'Poopï·ºðŸ€¥ðŸ€š!',
  name: 'decode utf32le',
  opts: { encoding: 'utf32le' }
});

testOutput({
  bytes: [
    0x00, 0x00, 0x00, 0x50,
    0x00, 0x00, 0x00, 0x6F,
    0x00, 0x00, 0x00, 0x6F,
    0x00, 0x00, 0x00, 0x70,
    0x00, 0x00, 0xFD, 0xFA,
    0x00, 0x01, 0xF0, 0x25,
    0x00, 0x01, 0xF0, 0x1A,
    0x00, 0x00, 0x00, 0x21
  ],
  expected: 'Poopï·ºðŸ€¥ðŸ€š!',
  name: 'decode utf32be',
  opts: { encoding: 'utf32be' }
});

testOutput({
  bytes: [
    0xFF, 0xFE, 0x00, 0x00,
    0x50, 0x00, 0x00, 0x00,
    0x6F, 0x00, 0x00, 0x00,
    0x6F, 0x00, 0x00, 0x00,
    0x70, 0x00, 0x00, 0x00,
    0xFA, 0xFD, 0x00, 0x00,
    0x25, 0xF0, 0x01, 0x00,
    0x1A, 0xF0, 0x01, 0x00,
    0x21, 0x00, 0x00, 0x00
  ],
  expected: 'Poopï·ºðŸ€¥ðŸ€š!',
  name: 'decode utf32 (LE, BOM)',
  opts: { encoding: 'utf32' }
});

testOutput({
  bytes: [
    0x00, 0x00, 0xFE, 0xFF,
    0x00, 0x00, 0x00, 0x50,
    0x00, 0x00, 0x00, 0x6F,
    0x00, 0x00, 0x00, 0x6F,
    0x00, 0x00, 0x00, 0x70,
    0x00, 0x00, 0xFD, 0xFA,
    0x00, 0x01, 0xF0, 0x25,
    0x00, 0x01, 0xF0, 0x1A,
    0x00, 0x00, 0x00, 0x21
  ],
  expected: 'Poopï·ºðŸ€¥ðŸ€š!',
  name: 'decode utf32 (BE, BOM)',
  opts: { encoding: 'utf32' }
});

testOutput({
  bytes: [
    0xFE, 0xFF, 0x00, 0x00,
    0x00, 0x50, 0x00, 0x00,
    0x00, 0x6F, 0x00, 0x00,
    0x00, 0x6F, 0x00, 0x00,
    0x00, 0x70, 0x00, 0x00,
    0xFD, 0xFA, 0x00, 0x00,
    0xF0, 0x25, 0x00, 0x01,
    0xF0, 0x1A, 0x00, 0x01,
    0x00, 0x21, 0x00, 0x00
  ],
  expected: 'Poopï·ºðŸ€¥ðŸ€š!',
  name: 'decode utf32 (LE-weird, BOM)',
  opts: { encoding: 'utf32' }
});

testOutput({
  bytes: [
    0x00, 0x00, 0xFF, 0xFE,
    0x00, 0x00, 0x50, 0x00,
    0x00, 0x00, 0x6F, 0x00,
    0x00, 0x00, 0x6F, 0x00,
    0x00, 0x00, 0x70, 0x00,
    0x00, 0x00, 0xFA, 0xFD,
    0x01, 0x00, 0x25, 0xF0,
    0x01, 0x00, 0x1A, 0xF0,
    0x00, 0x00, 0x21, 0x00
  ],
  expected: 'Poopï·ºðŸ€¥ðŸ€š!',
  name: 'decode utf32 (BE-weird, BOM)',
  opts: { encoding: 'utf32' }
});

testOutput({
  bytes: [
    [ 0x00, 0x00 ],
    [ 0xFF, 0xFE ],
    [ 0x00, 0x00, 0x50 ],
    [ 0x00, 0x00, 0x00 ],
    [ 0x6F ],
    [ 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x70, 0x00 ],
    [ 0x00, 0x00, 0xFA, 0xFD, 0x01 ],
    [ 0x00, 0x25, 0xF0, 0x01, 0x00 ],
    [ 0x1A, 0xF0, 0x00, 0x00, 0x21, 0x00 ]
  ],
  expected: 'Poopï·ºðŸ€¥ðŸ€š!',
  name: 'decode utf32 with codepoints split across buffer chunks',
  opts: { encoding: 'utf32' }
});
